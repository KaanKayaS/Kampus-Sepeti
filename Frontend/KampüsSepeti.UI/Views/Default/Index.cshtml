@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>İlanlar</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/KampüsSepetiFrontend/index.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Bootstrap Icons CDN -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css">
    @RenderSection("Styles", required: false)
</head>

<body>

    @await Component.InvokeAsync("_NavbarDefaultComponentPartial")

    <div class="main-content">
        @RenderBody()
    </div>

    <footer class="footer">
        <div class="footer-content">
            <p>Designed by <span class="designer">Kaan Kaya</span> © 2025</p>
        </div>
    </footer>

    <script src="~/KampüsSepetiFrontend/index.js"></script>
    <script src="~/KampüsSepetiFrontend/announcement.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script>
        // Global SignalR connection for online user tracking and live message storage
        (function() {
            const currentUser = '@User.Claims.FirstOrDefault(c => c.Type == "email")?.Value';
            if (currentUser) {
                window.globalSignalRConnection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .withAutomaticReconnect()
                    .build();
                window.globalSignalRConnection.start()
                    .then(() => console.log("Global SignalR Connected!"))
                    .catch(err => console.error("Global SignalR Connection Error: ", err));

                // Canlı mesajları localStorage'da sakla ve custom event ile chat sayfasına bildir
                window.globalSignalRConnection.on("ReceivePrivateMessage", (fromUser, message) => {
                    // Sohbet anahtarı: karşıdaki kullanıcı
                    const chatKey = fromUser === currentUser ? window.lastChatUser : fromUser;
                    let allChats = {};
                    try {
                        allChats = JSON.parse(localStorage.getItem("livePrivateMessages") || "{}")
                    } catch {}
                    if (!allChats[chatKey]) allChats[chatKey] = [];
                    allChats[chatKey].push({ from: fromUser, message });
                    localStorage.setItem("livePrivateMessages", JSON.stringify(allChats));
                    // Custom event ile chat sayfasına bildir
                    window.dispatchEvent(new CustomEvent('livePrivateMessage', { detail: { chatKey, fromUser, message } }));
                    console.log("[SignalR] Mesaj geldi:", fromUser, message);
                });
            }
        })();
    </script>
    @RenderSection("Scripts", required: false)

</body>
</html>

